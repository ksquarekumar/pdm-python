[tool.pdm]
distribution = true
version = { source = "file", path = "./src/pdm_python/__init__.py" }

[project]
name = "pdm-python"
dynamic = [
  "version",
]
description = 'A Simple Project meant to be forked and used as a template for creating new Python Packages'
readme = "README.md"
classifiers = [
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.12',
  'Operating System :: POSIX :: Linux',
  'Operating System :: MacOS',
  'Natural Language :: English',
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Topic :: Software Development :: Libraries',
  'Typing :: Typed',
]
keywords = [
  'python',
  'template',
]
license = { text = "MIT" }
authors = [
  { email = 'ksquarekumar@gmail.com', name = 'Krishna Kumar' },
  { name = "ksquarekumar", email = "ksquarekumar@gmail.com" },
]
maintainers = [
  { email = 'ksquarekumar@gmail.com', name = 'Krishna Kumar' },
]

requires-python = ">=3.12"
dependencies = [
  "h11>=0.14.0",
  "httpx>=0.27.2",
  "importlib_metadata",
  "joblib>=1.4.2",
  "litestar[standard]>=2.12.1",
  "orjson>=3.10.7",
  "psutil>=6.0.0",
  "pydantic-settings",
  "pydantic[email]>=2.9.2",
  "python-dotenv>=1.0.1",
  "structlog>=24.4.0",
  "uvicorn[standard]>=0.31.1",
  "uvloop>=0.20.0",
]

[project.optional-dependencies]
precommit = [
  "detect-secrets",
  "joblib",
  "nox",
  "ochrona>=2.0.0",
  "pre-commit-hooks",
  "pre-commit",
  "pyclean",
]
dev = [
  "pyinstrument~=4.7.3",
  "pip~=24.2.0",
]
lint = [
  "black >= 24.8.0",
  "codespell >= 2.3.0",
  "isort >= 5.13.2",
  "mypy >= 1.11.2",
  "pyright >= 1.1.383",
  "ruff >= 0.6.9",
]
build = [
  "cython >= 3.0.11",
  "python-build",
  "setuptools-cythonize",
  "setuptools",
]
jupyter = [
  "debugpy",
  "ipykernel",
  "ipython",
  "ipywidgets",
  "jupyter",
  "jupyterlab",
  "nbqa[toolchain,ruff,black]",
  "notebook",
]
types = [
  "types-cachetools",
  "types-decorator",
  "types-protobuf",
  "types-pycurl",
  "types-pyOpenSSL",
  "types-PyYAML",
  "types-requests",
  "types-simplejson",
  "types-six",
  "types-toml",
  "types-tqdm",
  "types-ujson",
  "types-urllib3",
  "typing-extensions>=4.12.2",
]
tests = [
  "coverage >= 7.6.1",
  "hypothesis",
  "pytest >= 8.3.3",
  "pytest-cov",
  "pytest-icdiff",
  "pytest-mock",
  "pytest-randomly",
  "pytest-rerunfailures",
  "pytest-sugar",
]

[project.urls]
Homepage = "https://github.com/ksquarekumar/pdm-python"
Issues = "https://github.com/ksquarekumar/pdm-python/issues"

[tool.pdm.scripts]
lint = "nox -s precommit"
format = "black src tests"
tests = "nox -s tests -- ./tests"
container_tests = "nox -s container_tests"
# LOCK
lock = "pdm lock -G:all --strategy inherit_metadata"
# PACKAGE-SPECIFIC
version = "python -m pdm_python"
# EXPORT
export = "pdm export --prod --without-hashes --editable-self --format=requirements -o requirements.txt"
# BUILD
build = "pdm build -p ./src/pdm_python --dest ../../build/ --no-clean"
# SCRIPTS
start = "python pdm_python"

[tool.pytest.ini_options]
minversion = 7.0
addopts = [
  '--strict-markers',
  '--strict-config',
  '-l',
  '--color=yes',
]
xfail_strict = true
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
console_output_style = 'progress-even-when-capture-no'

[tool.coverage.run]
cover_pylib = false
concurrency = [
  'thread',
]
data_file = '.coverage'
disable_warnings = [
  'trace-changed',
  'module-not-python',
  'module-not-imported',
  'no-data-collected',
  'module-not-measured',
  'include-ignored',
]
source = [
  'src/pdm_python',
]
omit = [
  '.venv/*',
  '.nox*',
  './docs/**/*',
  './.github/**/*',
]
parallel = true
timid = false

[tool.coverage.report]
show_missing = true
fail_under = 0
ignore_errors = true
skip_covered = true
skip_empty = true
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',
  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self.debug:',
  'if settings.DEBUG',
  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',
  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
  # Don't complain about abstract methods, they aren't run:
  'class .*\bProtocol\):',
  'class .*\bABC\):',
  '@(abc\.)?abstractmethod',
  # Ignore type checking code:
  'if (typing\.)?TYPE_CHECKING:',
  '@overload',
  # Don't complain about ellipsis (exception classes, typing overloads etc):
  '\.\.\.',
]

[tool.coverage.html]
show_contexts = true
skip_covered = true
skip_empty = true
directory = './.htmlcov'

[tool.coverage.xml]
output = 'coverage.xml'
package_depth = 99

[tool.black]
line-length = 88

[tool.ruff]
fix = true
cache-dir = ".ruff_cache"
target-version = "py312"
respect-gitignore = true
src = [
  'src/pdm_python',
  'tests',
]
extend-include = [
  "*.ipynb",
]
exclude = [
  ".eggs",
  ".git",
  ".git-rewrite",
  ".mypy_cache",
  ".nox",
  ".pytype",
  ".ruff_cache",
  ".tox",
  ".venv",
  "__pypackages__",
  "__pycache__",
  "_build",
  "build",
  "dist",
  "node_modules",
  "venv",
  ".venv",
]
line-length = 88

lint.select = [
  "ALL",
]
lint.ignore = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D212",
  "D213",
  "D402",
  "D413",
  "D415",
  "D416",
  "D417",
  "E501",
  "S101",
  "RET504",
  "PLR0913",
  "PLR2004",
  "ANN",
  "COM812",
  "G004",
  "TCH",
  "EXE002",
  "FIX002",
  "N818",
  "I002",    # breaks forward references
]
lint.unfixable = [
  "T10",
  "T20",
  "B",
  "SIM",
  "RUF",
  "C90",
  "C4",
  "N",
  "ANN",
  "PIE",
  "PLE",
  "PLC",
  "PLR",
  "PLW",
  "UP",
]
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = [
  'fastapi.Depends',
  'fastapi.Query',
]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = 'all'

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.lint.per-file-ignores]

[tool.ruff.lint.pydocstyle]
# Accepts: "google", "numpy", or "pep257".
convention = "numpy"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
force-sort-within-sections = true
forced-separate = [
  'tests',
]
lines-after-imports = 2
no-lines-before = [
  "future",
  "standard-library",
]
relative-imports-order = "furthest-to-closest"
single-line-exclusions = [
  "os",
  "sys",
]

[tool.codespell]
count = true
quiet-level = 3

[tool.mypy]
namespace_packages = false
strict = true
ignore_missing_imports = true
warn_unreachable = true
pretty = true
follow_imports = 'normal'
exclude = [
  './stubs',
  './typings',
]
# Know exactly what you're doing
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_absolute_path = true
# Ensure Full Coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
check_untyped_defs = true
# Restrict dynamic typing
disallow_any_decorated = false
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
# Explicit is better than implicit
strict_equality = true
strict_optional = true
no_implicit_optional = true
disable_error_code = "valid-type"

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = 'tests.*'
strict = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false

[[tool.mypy.overrides]]
module = 'noxfile.*'
strict = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false

[tool.pyright]
include = [
  'src',
  'tests',
]
exclude = [
  '**/.venv',
  '**/__pycache__',
  '**/stubs',
]
stubPath = './stubs'
useLibraryCodeForTypes = true

[build-system]
requires = [
  "pdm-backend",
]
build-backend = "pdm.backend"

[tool.hatch.build.targets.wheel]
packages = [
  "pdm_python",
]
only-packages = true
