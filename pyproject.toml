[project]
name = "pdm-python"
dynamic = ["version"]
description = 'A Simple Project meant to be forked and used as a template for creating new Python Packages'
readme = "README.md"
classifiers = [
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.11',
  'Operating System :: POSIX :: Linux',
  'Operating System :: MacOS',
  'Natural Language :: English',
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Topic :: Software Development :: Libraries',
  'Typing :: Typed',
]
keywords = ['machine learning', 'frontend', 'llm']
license = {text = "MIT"}
authors = [
    { email = 'ksquarekumar@gmail.com', name = 'Krishna Kumar' },
    {name = "ksquarekumar", email = "ksquarekumar@gmail.com"},
]
maintainers = [{ email = 'ksquarekumar@gmail.com', name = 'Krishna Kumar' }]

requires-python = ">=3.12"
dependencies = [
    "importlib_metadata",
    "litestar[standard]>=0.1.0",
    "pydantic[email]>=2.7.1",
    "pydantic-settings>2.2.0",
    "orjson>=3.10.3",
    "structlog>=24.1.0",
    "joblib>=1.4.2",
    "python-dotenv>=1.0.1",
    "psutil>=5.9.8",
    "uvicorn[standard]>=0.29.0",
    "uvloop>=0.19.0",
]

[tool.pdm]
distribution = true
version = { source = "file", path = "./src/pdm_python/__init__.py" }

[tool.pdm.dev-dependencies]
precommit = [
  "nox",
  "ochrona>=2.0.0",
  "detect-secrets",
  "pyclean",
  "pre-commit",
  "pre-commit-hooks",
]
lint = [
  "black >= 21.12b0",
  "isort >= 5.10.1",
  "ruff >= 0.1.0",
  "pyright >= 0.0.1",
  "mypy[mypyc] >= 1.10.0",
  "codespell >= 2.3.0",
]
build = [
  "cython >= 3.0.10",
  "setuptools",
  "python-build",
  "setuptools-cythonize",
]
jupyter = [
  "jupyter",
  "ipython",
  "ipykernel",
  "notebook",
  "jupyterlab",
  "ipywidgets",
  "debugpy",
  "nbqa[toolchain,ruff,black]",
]
types = [
  "types-requests",
  "types-PyYAML"
]
tests = [
  "pytest >= 7.4.2",
  "coverage >= 7.4.1",
  "pytest-randomly",
  "pytest-mock",
  "pytest-rerunfailures",
  "pytest-sugar",
  "pytest-icdiff",
  "hypothesis",
  "pytest-xdist[psutils]",
  "pytest-cov",
]

[project.urls]
Homepage = "https://github.com/ksquarekumar/pdm-python"
Issues = "https://github.com/ksquarekumar/pdm-python/issues"

[tool.pytest.ini_options]
minversion = 7.0
addopts = ['--strict-markers', '--strict-config', '-l', '--color=yes']
xfail_strict = true
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
console_output_style = 'progress-even-when-capture-no'

[tool.coverage.run]
cover_pylib = false
concurrency = ['thread']
data_file = '.coverage'
disable_warnings = [
  'trace-changed',
  'module-not-python',
  'module-not-imported',
  'no-data-collected',
  'module-not-measured',
  'include-ignored',
]
source = ['src/pdm_python']
omit = ['.venv/*', '.nox*', './docs/**/*', './.github/**/*']
parallel = true
timid = false

[tool.coverage.report]
show_missing = true
fail_under = 0
ignore_errors = true
skip_covered = true
skip_empty = true
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',
  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self.debug:',
  'if settings.DEBUG',
  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',
  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
  # Don't complain about abstract methods, they aren't run:
  'class .*\bProtocol\):',
  'class .*\bABC\):',
  '@(abc\.)?abstractmethod',
  # Ignore type checking code:
  'if (typing\.)?TYPE_CHECKING:',
  '@overload',
  # Don't complain about ellipsis (exception classes, typing overloads etc):
  '\.\.\.'
]

[tool.coverage.html]
show_contexts = true
skip_covered = true
skip_empty = true
directory='./.htmlcov'

[tool.coverage.xml]
output='coverage.xml'
package_depth=99

[tool.black]
line-length = 88

[tool.ruff]
fix = true
cache-dir = ".ruff_cache"
target-version = "py312"
respect-gitignore = true
src = ['src/pdm_python', 'tests']
extend-include = ["*.ipynb"]
exclude = [
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".nox",
    ".pytype",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "__pycache__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv"
]
line-length = 88

lint.select = ["ALL"]
lint.ignore = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D212",
  "D213",
  "D402",
  "D413",
  "D415",
  "D416",
  "D417",
  "E501",
  "S101",
  "RET504",
  "PLR0913",
  "PLR2004",
  "ANN",
  "COM812",
  "G004",
  "TCH",
  "EXE002",
  "FIX002",
  "N818",
  "I002" # breaks forward references
]
lint.unfixable = [
  "T10",
  "T20",
  "B",
  "SIM",
  "RUF",
  "C90",
  "C4",
  "N",
  "ANN",
  "PIE",
  "PLE",
  "PLC",
  "PLR",
  "PLW",
  "UP"
]
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ['fastapi.Depends', 'fastapi.Query']

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = 'all'

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.lint.per-file-ignores]


[tool.ruff.lint.pydocstyle]
# Accepts: "google", "numpy", or "pep257".
convention = "numpy"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
force-sort-within-sections = true
forced-separate = ['tests']
lines-after-imports = 2
no-lines-before = ["future", "standard-library"]
relative-imports-order = "furthest-to-closest"
single-line-exclusions = ["os", "sys"]

[tool.codespell]
count = true
quiet-level = 3

[tool.mypy]
namespace_packages = true
strict = true
ignore_missing_imports = true
warn_unreachable = true
pretty = true
follow_imports = 'normal'
exclude = [
  'stubs',
]
# Know exactly what you're doing
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_absolute_path = true
# Ensure Full Coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
# Restrict dynamic typing
disallow_any_decorated = false
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
# Explicit is better than implicit
strict_equality = true
strict_optional = true
no_implicit_optional = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = 'tests.*'
strict = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false

[[tool.mypy.overrides]]
module = 'noxfile.*'
strict = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false

[tool.pyright]
include = ['src/pdm_python', 'tests']
exclude = ['**/.venv', '**/__pycache__', '**/stubs']
stubPath = './stubs'
useLibraryCodeForTypes = true

[tool.pdm.scripts]
start = "python pdm_python"


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.hatch.build.targets.wheel]
packages = ["llm_streaming_service"]
only-packages = true
