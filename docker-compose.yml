services:
  redis:
    container_name: redis
    hostname: redis
    platform: linux/amd64
    restart: always
    image: redis
    ipc: host
    networks:
      - service-network
    profiles:
      - dev
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --appendonly yes
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 30s

  postgres:
    container_name: postgres
    hostname: postgres
    platform: linux/amd64
    restart: always
    image: postgres:latest
    ipc: host
    networks:
      - service-network
    user: postgres
    profiles:
      - dev
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql
      - ./dist/postgres-config:/etc/postgresql
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 30s

  local-service:
    container_name: local-service
    hostname: local-service
    platform: linux/amd64
    restart: no
    privileged: true
    user: app
    ipc: host
    networks:
      - service-network
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_ENV: prod
        DEBUG: "False"
        LOG_LEVEL: INFO
        PORT: ${PORT:-8080}
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    expose:
      - "${PORT:-8080}"
    command: >
      litestar --app pdm_python.app:app run --reload --port ${PORT:-8080} --host 0.0.0.0
    volumes:
      - ./src/pdm_python/:/code/src/pdm_python/:ro
      - .svc-logs:/code/logs
      - .svc-cache:/code/.cache
    env_file:
      - .env

volumes:
  postgres-data:
  redis:
  svc-logs:
  svc-cache:

networks:
  service-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: service-network
      com.docker.network.bridge.enable_icc: "true"
